[1mdiff --git a/src/main/java/com/moodTrip/spring/domain/rooms/dto/response/RoomResponse.java b/src/main/java/com/moodTrip/spring/domain/rooms/dto/response/RoomResponse.java[m
[1mindex edbaa9d..1fc8fca 100644[m
[1m--- a/src/main/java/com/moodTrip/spring/domain/rooms/dto/response/RoomResponse.java[m
[1m+++ b/src/main/java/com/moodTrip/spring/domain/rooms/dto/response/RoomResponse.java[m
[36m@@ -4,6 +4,8 @@[m [mimport com.moodTrip.spring.domain.rooms.entity.Room;[m
 import io.swagger.v3.oas.annotations.media.Schema;[m
 import lombok.*;[m
 [m
[32m+[m[32mimport java.math.BigDecimal;[m
[32m+[m
 @Data[m
 @AllArgsConstructor[m
 @NoArgsConstructor[m
[36m@@ -26,6 +28,12 @@[m [mpublic class RoomResponse {[m
     @Schema(description = "Ïó¨Ìñâ Î™©Ï†ÅÏßÄ Ïù¥Î¶Ñ", example = "ÏÜçÏ¥à Ìï¥ÏàòÏöïÏû•")[m
     private String destinationName;[m
 [m
[32m+[m[32m    @Schema(description = "Ïó¨Ìñâ Î™©Ï†ÅÏßÄ ÏúÑÎèÑ", example = "37.5665357")[m
[32m+[m[32m    private BigDecimal destinationLat;[m
[32m+[m
[32m+[m[32m    @Schema(description = "Ïó¨Ìñâ Î™©Ï†ÅÏßÄ Í≤ΩÎèÑ", example = "126.9779692")[m
[32m+[m[32m    private BigDecimal destinationLon;[m
[32m+[m
     @Schema(description = "ÏµúÎåÄ Ïù∏Ïõê Ïàò", example = "4")[m
     private int maxParticipants;[m
 [m
[36m@@ -42,17 +50,19 @@[m [mpublic class RoomResponse {[m
     private Boolean isDeleted;[m
 [m
     public static RoomResponse from(Room room) {[m
[31m-        return new RoomResponse([m
[31m-                room.getRoomId(),[m
[31m-                room.getRoomName(),[m
[31m-                room.getRoomDescription(),[m
[31m-                room.getDestinationCategory(),[m
[31m-                room.getDestinationName(),[m
[31m-                room.getRoomMaxCount(),[m
[31m-                room.getRoomCurrentCount(),[m
[31m-                room.getTravelStartDate() != null ? room.getTravelStartDate().toString() : null,[m
[31m-                room.getTravelEndDate() != null ? room.getTravelEndDate().toString() : null,[m
[31m-                room.getIsDeleteRoom()[m
[31m-        );[m
[32m+[m[32m        return RoomResponse.builder()[m
[32m+[m[32m                .roomId(room.getRoomId())[m
[32m+[m[32m                .roomName(room.getRoomName())[m
[32m+[m[32m                .roomDescription(room.getRoomDescription())[m
[32m+[m[32m                .destinationCategory(room.getDestinationCategory())[m
[32m+[m[32m                .destinationName(room.getDestinationName())[m
[32m+[m[32m                .destinationLat(room.getDestinationLat())[m
[32m+[m[32m                .destinationLon(room.getDestinationLon())[m
[32m+[m[32m                .maxParticipants(room.getRoomMaxCount())[m
[32m+[m[32m                .currentParticipants(room.getRoomCurrentCount())[m
[32m+[m[32m                .travelStartDate(room.getTravelStartDate() != null ? room.getTravelStartDate().toString() : null)[m
[32m+[m[32m                .travelEndDate(room.getTravelEndDate() != null ? room.getTravelEndDate().toString() : null)[m
[32m+[m[32m                .isDeleted(room.getIsDeleteRoom())[m
[32m+[m[32m                .build();[m
     }[m
 }[m
[1mdiff --git a/src/main/java/com/moodTrip/spring/domain/rooms/entity/Room.java b/src/main/java/com/moodTrip/spring/domain/rooms/entity/Room.java[m
[1mindex ae36b45..a776b82 100644[m
[1m--- a/src/main/java/com/moodTrip/spring/domain/rooms/entity/Room.java[m
[1m+++ b/src/main/java/com/moodTrip/spring/domain/rooms/entity/Room.java[m
[36m@@ -5,6 +5,7 @@[m [mimport com.moodTrip.spring.global.common.entity.BaseEntity;[m
 import jakarta.persistence.*;[m
 import lombok.*;[m
 [m
[32m+[m[32mimport java.math.BigDecimal;[m
 import java.time.LocalDate;[m
 import java.util.ArrayList;[m
 import java.util.List;[m
[36m@@ -48,7 +49,15 @@[m [mpublic class Room extends BaseEntity {[m
 [m
     @Column(name = "destination_name")[m
     private String destinationName;[m
[31m-//[m
[32m+[m
[32m+[m
[32m+[m[32m    // Attraction ÏÇ¨Ïö©ÌïòÎ©¥ Ïù¥Í±∞ ÎåÄÏã† attraction[m
[32m+[m[32m    @Column(name = "destination_lat", precision = 10, scale = 7) // Ïòà: 37.5665357[m
[32m+[m[32m    private BigDecimal destinationLat;[m
[32m+[m
[32m+[m[32m    @Column(name = "destination_lon", precision = 10, scale = 7) // Ïòà: 126.9779692[m
[32m+[m[32m    private BigDecimal destinationLon;[m
[32m+[m
 //    @OneToMany(mappedBy = "room", cascade = CascadeType.ALL, orphanRemoval = true)[m
 //    private List<EmotionRoom> emotionRooms = new ArrayList<>();[m
 [m
[1mdiff --git a/src/main/java/com/moodTrip/spring/domain/schedule/entity/Schedule.java b/src/main/java/com/moodTrip/spring/domain/schedule/entity/Schedule.java[m
[1mindex 0c23ac5..df39f58 100644[m
[1m--- a/src/main/java/com/moodTrip/spring/domain/schedule/entity/Schedule.java[m
[1m+++ b/src/main/java/com/moodTrip/spring/domain/schedule/entity/Schedule.java[m
[36m@@ -5,6 +5,7 @@[m [mimport com.moodTrip.spring.global.common.entity.BaseEntity;[m
 import jakarta.persistence.*;[m
 import lombok.*;[m
 [m
[32m+[m[32mimport java.math.BigDecimal;[m
 import java.time.LocalDateTime;[m
 [m
 @Entity[m
[36m@@ -31,4 +32,13 @@[m [mpublic class Schedule extends BaseEntity {[m
 [m
     private LocalDateTime startedSchedule;[m
     private LocalDateTime updatedSchedule;[m
[32m+[m
[32m+[m[32m    @Column(name = "place_name", length = 200)[m
[32m+[m[32m    private String placeName;[m
[32m+[m
[32m+[m[32m    @Column(name = "place_lat", precision = 10, scale = 7)[m
[32m+[m[32m    private BigDecimal placeLat;[m
[32m+[m
[32m+[m[32m    @Column(name = "place_lon", precision = 10, scale = 7)[m
[32m+[m[32m    private BigDecimal placeLon;[m
 }[m
[1mdiff --git a/src/main/java/com/moodTrip/spring/domain/schedule/service/ScheduleServiceImpl.java b/src/main/java/com/moodTrip/spring/domain/schedule/service/ScheduleServiceImpl.java[m
[1mindex d058ed3..4bac53e 100644[m
[1m--- a/src/main/java/com/moodTrip/spring/domain/schedule/service/ScheduleServiceImpl.java[m
[1m+++ b/src/main/java/com/moodTrip/spring/domain/schedule/service/ScheduleServiceImpl.java[m
[36m@@ -6,6 +6,7 @@[m [mimport com.moodTrip.spring.domain.schedule.dto.request.ScheduleRequest;[m
 import com.moodTrip.spring.domain.schedule.dto.response.ScheduleResponse;[m
 import com.moodTrip.spring.domain.schedule.entity.Schedule;[m
 import com.moodTrip.spring.domain.schedule.repository.ScheduleRepository;[m
[32m+[m[32mimport com.moodTrip.spring.global.common.exception.CustomException;[m
 import jakarta.transaction.Transactional;[m
 import lombok.RequiredArgsConstructor;[m
 import org.springframework.stereotype.Service;[m
[36m@@ -13,6 +14,8 @@[m [mimport org.springframework.stereotype.Service;[m
 import java.time.LocalDateTime;[m
 import java.util.List;[m
 [m
[32m+[m[32mimport static com.moodTrip.spring.global.common.code.status.ErrorStatus.*;[m
[32m+[m
 @Service[m
 @RequiredArgsConstructor[m
 @Transactional[m
[36m@@ -32,7 +35,7 @@[m [mpublic class ScheduleServiceImpl implements ScheduleService {[m
     @Override[m
     public ScheduleResponse createSchedule(Long roomId, ScheduleRequest request) {[m
         Room room = roomRepository.findById(roomId)[m
[31m-                .orElseThrow(() -> new IllegalArgumentException("Room not found"));[m
[32m+[m[32m                .orElseThrow(() -> new CustomException(ROOM_NOT_FOUND));[m
 [m
         Schedule schedule = Schedule.builder()[m
                 .room(room)[m
[36m@@ -49,7 +52,7 @@[m [mpublic class ScheduleServiceImpl implements ScheduleService {[m
     @Override[m
     public ScheduleResponse updateSchedule(Long scheduleId, ScheduleRequest request) {[m
         Schedule schedule = scheduleRepository.findById(scheduleId)[m
[31m-                .orElseThrow(() -> new IllegalArgumentException("Ìï¥Îãπ ÏùºÏ†ïÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§."));[m
[32m+[m[32m                .orElseThrow(() -> new CustomException(SCHEDULE_NOT_FOUND));[m
 [m
         if (request.getScheduleTitle() != null) {[m
             schedule.setScheduleTitle(request.getScheduleTitle());[m
[36m@@ -76,7 +79,7 @@[m [mpublic class ScheduleServiceImpl implements ScheduleService {[m
     @Override[m
     public Long getRoomIdByScheduleId(Long scheduleId) {[m
         Schedule schedule = scheduleRepository.findById(scheduleId)[m
[31m-                .orElseThrow(() -> new RuntimeException("Schedule not found"));[m
[32m+[m[32m                .orElseThrow(() ->new CustomException(SCHEDULE_NOT_FOUND));[m
         return schedule.getRoom().getRoomId();[m
     }[m
 }[m
[1mdiff --git a/src/main/java/com/moodTrip/spring/domain/transport/service/ODsayService.java b/src/main/java/com/moodTrip/spring/domain/transport/service/ODsayService.java[m
[1mnew file mode 100644[m
[1mindex 0000000..69176f8[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/moodTrip/spring/domain/transport/service/ODsayService.java[m
[36m@@ -0,0 +1,13 @@[m
[32m+[m[32mpackage com.moodTrip.spring.domain.transport.service;[m
[32m+[m
[32m+[m
[32m+[m[32mimport com.moodTrip.spring.domain.transport.service.dto.RouteOptionDto;[m
[32m+[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32mpublic interface ODsayService {[m
[32m+[m[32m    /**[m
[32m+[m[32m     * ÎåÄÏ§ëÍµêÌÜµ Í≤ΩÎ°ú Ï°∞Ìöå (Í≤ΩÎèÑ/ÏúÑÎèÑ ÏàúÏÑú Ïú†Ïùò: X=lng, Y=lat)[m
[32m+[m[32m     */[m
[32m+[m[32m    List<RouteOptionDto> getTransitRoutes(double sx, double sy, double ex, double ey);[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/src/main/java/com/moodTrip/spring/global/common/code/status/ErrorStatus.java b/src/main/java/com/moodTrip/spring/global/common/code/status/ErrorStatus.java[m
[1mindex 9b7ea95..6ccd9be 100644[m
[1m--- a/src/main/java/com/moodTrip/spring/global/common/code/status/ErrorStatus.java[m
[1m+++ b/src/main/java/com/moodTrip/spring/global/common/code/status/ErrorStatus.java[m
[36m@@ -27,6 +27,10 @@[m [mpublic enum ErrorStatus implements BaseErrorCode {[m
 [m
     // Schedule Í¥ÄÎ†®[m
     SCHEDULE_NOT_FOUND(HttpStatus.NOT_FOUND, "SCHEDULE_001", "Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî ÏùºÏ†ïÏûÖÎãàÎã§."),[m
[32m+[m[32m    SCHEDULE_TITLE_REQUIRED(HttpStatus.BAD_REQUEST, "SCHEDULE_002", "ÏùºÏ†ï Ï†úÎ™©ÏùÄ ÌïÑÏàòÏûÖÎãàÎã§."),[m
[32m+[m[32m    SCHEDULE_DATE_INVALID(HttpStatus.BAD_REQUEST, "SCHEDULE_003", "ÏùºÏ†ï ÎÇ†ÏßúÍ∞Ä Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§."),[m
[32m+[m[32m    SCHEDULE_DUPLICATED(HttpStatus.CONFLICT, "SCHEDULE_004", "ÎèôÏùºÌïú ÏùºÏ†ïÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§."),[m
[32m+[m[32m    SCHEDULE_UNAUTHORIZED_ACCESS(HttpStatus.FORBIDDEN, "SCHEDULE_005", "ÏùºÏ†ïÏóê ÎåÄÌïú Ï†ëÍ∑º Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§."),[m
 [m
     //Í∏∞ÌÉÄ ÎèÑÎ©îÏù∏ ÏòàÏãú,[m
     CARD_NOT_FOUND(HttpStatus.NOT_FOUND, "CARD_001", "Ìï¥Îãπ Ïπ¥ÎìúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."),[m
[36m@@ -40,7 +44,14 @@[m [mpublic enum ErrorStatus implements BaseErrorCode {[m
 [m
     // RoomMember Í¥ÄÎ†®[m
     ROOM_MEMBER_ALREADY_EXISTS(HttpStatus.CONFLICT, "ROOM_MEMBER_001", "Ïù¥ÎØ∏ Ìï¥Îãπ Î∞©Ïóê Ï∞∏Ïó¨Ìïú ÌöåÏõêÏûÖÎãàÎã§."),[m
[31m-    ROOM_MEMBER_NOT_FOUND(HttpStatus.NOT_FOUND, "ROOM_MEMBER_002", "Î∞© Ï∞∏Ïó¨ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");[m
[32m+[m[32m    ROOM_MEMBER_NOT_FOUND(HttpStatus.NOT_FOUND, "ROOM_MEMBER_002", "Î∞© Ï∞∏Ïó¨ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."),[m
[32m+[m
[32m+[m[32m    // Transport Í¥ÄÎ†®[m
[32m+[m[32m    TRANSPORT_API_ERROR(HttpStatus.INTERNAL_SERVER_ERROR, "TRANSPORT_001", "ÎåÄÏ§ëÍµêÌÜµ API Ìò∏Ï∂ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."),[m
[32m+[m[32m    TRANSPORT_NO_ROUTE(HttpStatus.NOT_FOUND, "TRANSPORT_002", "ÎåÄÏ§ëÍµêÌÜµ Í≤ΩÎ°úÎ•º Ï∞æÏßÄ Î™ªÌñàÏäµÎãàÎã§."),[m
[32m+[m[32m    TRANSPORT_RATE_LIMIT(HttpStatus.TOO_MANY_REQUESTS, "TRANSPORT_003", "ÎåÄÏ§ëÍµêÌÜµ API Ìò∏Ï∂ú ÌïúÎèÑÎ•º Ï¥àÍ≥ºÌñàÏäµÎãàÎã§."),[m
[32m+[m[32m    TRANSPORT_AUTH_ERROR(HttpStatus.UNAUTHORIZED, "TRANSPORT_004", "ÎåÄÏ§ëÍµêÌÜµ API Ïù∏Ï¶ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§."),[m
[32m+[m[32m    TRANSPORT_BAD_REQUEST(HttpStatus.BAD_REQUEST, "TRANSPORT_005", "ÎåÄÏ§ëÍµêÌÜµ API ÏöîÏ≤≠ ÌååÎùºÎØ∏ÌÑ∞Í∞Ä Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§.");[m
 [m
     private final HttpStatus httpStatus;[m
     private final String code;[m
[1mdiff --git a/src/main/java/com/moodTrip/spring/infrastructure/external/transport/,gitkeep b/src/main/java/com/moodTrip/spring/infrastructure/external/transport/,gitkeep[m
[1mdeleted file mode 100644[m
[1mindex e69de29..0000000[m
[1mdiff --git a/src/main/resources/static/css/schedule-with-companion/scheduling.css b/src/main/resources/static/css/schedule-with-companion/scheduling.css[m
[1mindex 0bdfcd7..1d5312a 100644[m
[1m--- a/src/main/resources/static/css/schedule-with-companion/scheduling.css[m
[1m+++ b/src/main/resources/static/css/schedule-with-companion/scheduling.css[m
[36m@@ -569,39 +569,195 @@[m [mbody {[m
 }[m
 [m
 /* ÍµêÌÜµ ÏÑπÏÖò */[m
[32m+[m[32m/*.transport-section {*/[m
[32m+[m[32m/*    display: grid;*/[m
[32m+[m[32m/*    grid-template-columns: 1fr 1fr;*/[m
[32m+[m[32m/*    gap: 35px;*/[m
[32m+[m[32m/*}*/[m
[32m+[m
 .transport-section {[m
     display: grid;[m
[31m-    grid-template-columns: 1fr 1fr;[m
[31m-    gap: 35px;[m
[32m+[m[32m    grid-template-columns: 1.2fr 0.8fr; /* ÏôºÏ™ΩÏùÑ Ï°∞Í∏à Îçî ÎÑìÍ≤å */[m
[32m+[m[32m    gap: 24px;[m
[32m+[m[32m    align-items: start;                 /* ÏúÑÏ™ΩÏóê Ï†ïÎ†¨ */[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m.map-block {[m
[32m+[m[32m    display: flex;[m
[32m+[m[32m    flex-direction: column;[m
[32m+[m[32m    gap: 12px;                          /* Í≤ÄÏÉâÏ∞Ω¬∑Í≤∞Í≥º¬∑ÏßÄÎèÑ Í∞ÑÍ≤© */[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m/* Í≤ÄÏÉâ Î∞ïÏä§ Ïπ¥ÎìúÌôî(Í∏∞Ï°¥ Ïä§ÌÉÄÏùº ÏùëÏö©) */[m
[32m+[m[32m.search-container {[m
[32m+[m[32m    background: linear-gradient(135deg, #ffffff 0%, #f8fafb 100%);[m
[32m+[m[32m    border: 1px solid rgba(0, 87, 146, 0.10);[m
[32m+[m[32m    border-radius: 20px;[m
[32m+[m[32m    padding: 16px;[m
[32m+[m[32m    box-shadow: 0 12px 28px rgba(0, 26, 44, 0.12);[m
[32m+[m[32m    display: flex;[m
[32m+[m[32m    align-items: center;[m
[32m+[m[32m    gap: 12px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#placeSearchInput {[m
[32m+[m[32m    flex: 1;[m
[32m+[m[32m    height: 48px;[m
[32m+[m[32m    padding: 0 16px;[m
[32m+[m[32m    border: 2px solid rgba(0, 87, 146, 0.20);[m
[32m+[m[32m    border-radius: 14px;[m
[32m+[m[32m    outline: none;[m
[32m+[m[32m    font-size: 15px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#placeSearchInput:focus {[m
[32m+[m[32m    border-color: #005792;[m
[32m+[m[32m    box-shadow: 0 0 0 3px rgba(0, 87, 146, 0.15);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#placeSearchBtn { height: 48px; padding: 0 20px; }[m
[32m+[m
[32m+[m[32m/* Í≤ÄÏÉâ Í≤∞Í≥º Î∞ïÏä§(ÏßÄÎèÑ ÏúÑÏóê, Î†àÏù¥ÏïÑÏõÉ Î∞ÄÏßÄ ÏïäÍ≤å ÌïòÍ≥† Ïã∂ÏúºÎ©¥ absoluteÎ°ú Î∞îÍøîÎèÑ Îê®) */[m
[32m+[m[32m#placeResults {[m
[32m+[m[32m    background:#fff;[m
[32m+[m[32m    border:1px solid rgba(0,87,146,.1);[m
[32m+[m[32m    border-radius:16px;[m
[32m+[m[32m    box-shadow:0 8px 20px rgba(0,26,44,.1);[m
[32m+[m[32m    max-height:260px;[m
[32m+[m[32m    overflow:auto;[m
[32m+[m[32m    padding: 6px 0;[m
 }[m
 [m
[32m+[m
[32m+[m[32m/* ÏßÄÎèÑ Ïπ¥Îìú ÎÜíÏù¥/Ï†ïÎ†¨ Ï°∞Ï†ï */[m
 .map-container {[m
     background: linear-gradient(135deg, #f0f7ff 0%, #e1f0ff 100%);[m
     border-radius: 20px;[m
[31m-    padding: 30px;[m
[32m+[m[32m    padding: 16px;[m
     box-shadow: 0 15px 35px rgba(0, 26, 44, 0.15);[m
[31m-    min-height: 450px;[m
[31m-    display: flex;[m
[31m-    align-items: center;[m
[31m-    justify-content: center;[m
[31m-    color: #001A2C;[m
[31m-    font-size: 18px;[m
[32m+[m[32m    min-height: 520px;[m
     border: 2px dashed rgba(0, 87, 146, 0.3);[m
     position: relative;[m
     overflow: hidden;[m
 }[m
 [m
[32m+[m[32m.map-container {[m
[32m+[m[32m    position: relative; /* Ïò§Î≤ÑÎ†àÏù¥ Ìè¨ÏßÄÏÖîÎãùÏö© */[m
[32m+[m[32m}[m
[32m+[m
 .map-container::before {[m
[31m-    content: '';[m
[31m-    position: absolute;[m
[31m-    top: 0;[m
[31m-    left: -100%;[m
[31m-    width: 100%;[m
[31m-    height: 100%;[m
[31m-    background: linear-gradient(90deg, transparent, rgba(0, 87, 146, 0.1), transparent);[m
[32m+[m[32m    content:'';[m
[32m+[m[32m    position:absolute; inset:0;[m
[32m+[m[32m    background:linear-gradient(90deg,transparent,rgba(0,87,146,.1),transparent);[m
     animation: mapShimmer 3s infinite;[m
[32m+[m[32m    pointer-events:none; /* Ïò§Î≤ÑÎ†àÏù¥Í∞Ä ÏßÄÎèÑÎ•º ÎßâÏßÄ ÏïäÍ≤å */[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m.route-search {[m
[32m+[m[32m    position: absolute;[m
[32m+[m[32m    top: 16px; left: 16px; right: 16px;[m
[32m+[m[32m    z-index: 5;[m
[32m+[m[32m    display: grid;[m
[32m+[m[32m    gap: 10px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m/* Í≤ÄÏÉâ Ïù∏Ìíã Î¨∂Ïùå */[m
[32m+[m[32m.route-inputs {[m
[32m+[m[32m    display: grid;[m
[32m+[m[32m    grid-template-columns: 1fr auto 1fr auto;[m
[32m+[m[32m    gap: 10px;[m
[32m+[m[32m    align-items: center;[m
[32m+[m[32m    background: linear-gradient(135deg, #eef6ff 0%, #e7f0ff 100%);[m
[32m+[m[32m    border: 1px solid rgba(11, 109, 190, .18);[m
[32m+[m[32m    border-radius: 14px;[m
[32m+[m[32m    padding: 12px;[m
[32m+[m[32m    box-shadow: 0 12px 28px rgba(0, 26, 44, .15);[m
[32m+[m[32m    backdrop-filter: blur(4px);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m.route-inputs input {[m
[32m+[m[32m    height: 40px;[m
[32m+[m[32m    border: 1px solid rgba(11, 109, 190, .25);[m
[32m+[m[32m    border-radius: 10px;[m
[32m+[m[32m    padding: 0 12px;[m
[32m+[m[32m    font-size: 14px;[m
[32m+[m[32m    color: #0a263b;[m
[32m+[m[32m    background: #fff;[m
[32m+[m[32m    outline: none;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#swapRouteBtn {[m
[32m+[m[32m    height: 40px;[m
[32m+[m[32m    padding: 0 10px;[m
[32m+[m[32m    border: none;[m
[32m+[m[32m    border-radius: 10px;[m
[32m+[m[32m    background: linear-gradient(135deg, #0b6dbe 0%, #0a263b 100%);[m
[32m+[m[32m    color: #fff;[m
[32m+[m[32m    cursor: pointer;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m.results {[m
[32m+[m[32m    display: none;[m
[32m+[m[32m    background: #fff;[m
[32m+[m[32m    border: 1px solid rgba(11, 109, 190, .2);[m
[32m+[m[32m    border-radius: 12px;[m
[32m+[m[32m    box-shadow: 0 16px 40px rgba(0,26,44,.18);[m
[32m+[m[32m    max-height: 260px;[m
[32m+[m[32m    overflow: auto;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m.results .result-item {[m
[32m+[m[32m    padding: 10px 12px;[m
[32m+[m[32m    border-bottom: 1px solid #f1f4f8;[m
[32m+[m[32m    cursor: pointer;[m
[32m+[m[32m}[m
[32m+[m[32m.results .result-item:last-child { border-bottom: none; }[m
[32m+[m[32m.results .result-item:hover {[m
[32m+[m[32m    background: #f5faff;[m
[32m+[m[32m}[m
[32m+[m[32m.results .name { font-weight: 700; color: #0a263b; }[m
[32m+[m[32m.results .addr { font-size: 12px; color: #5a7a94; margin-top: 2px; }[m
[32m+[m
[32m+[m[32m#map {[m
[32m+[m[32m    width:100%;[m
[32m+[m[32m    height:100%;[m
[32m+[m[32m    min-height:488px;      /* Ïª®ÌÖåÏù¥ÎÑà ÎÜíÏù¥Ïóê ÎßûÏ∂∞ Ï°∞Ï†ï */[m
[32m+[m[32m    border-radius:12px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m@media (max-width: 992px) {[m
[32m+[m[32m    .transport-section { grid-template-columns: 1fr; }[m
[32m+[m[32m    .map-container { min-height: 380px; }[m
[32m+[m[32m    #map { min-height: 340px; }[m
 }[m
 [m
[32m+[m[32m/*.map-container {*/[m
[32m+[m[32m/*    background: linear-gradient(135deg, #f0f7ff 0%, #e1f0ff 100%);*/[m
[32m+[m[32m/*    border-radius: 20px;*/[m
[32m+[m[32m/*    padding: 30px;*/[m
[32m+[m[32m/*    box-shadow: 0 15px 35px rgba(0, 26, 44, 0.15);*/[m
[32m+[m[32m/*    min-height: 450px;*/[m
[32m+[m[32m/*    display: flex;*/[m
[32m+[m[32m/*    align-items: center;*/[m
[32m+[m[32m/*    justify-content: center;*/[m
[32m+[m[32m/*    color: #001A2C;*/[m
[32m+[m[32m/*    font-size: 18px;*/[m
[32m+[m[32m/*    border: 2px da